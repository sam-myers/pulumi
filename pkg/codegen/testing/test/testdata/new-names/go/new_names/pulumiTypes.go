// Code generated by test DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package new_names

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"internal"
)

var _ = internal.GetEnvOrDefault

type EnumXyzMapArray []EnumXyzMapInput

func (EnumXyzMapArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]map[string]EnumXyz)(nil)).Elem()
}

func (i EnumXyzMapArray) ToEnumXyzMapArrayOutput() EnumXyzMapArrayOutput {
	return i.ToEnumXyzMapArrayOutputWithContext(context.Background())
}

func (i EnumXyzMapArray) ToEnumXyzMapArrayOutputWithContext(ctx context.Context) EnumXyzMapArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnumXyzMapArrayOutput)
}

// EnumXyzMapArrayInput is an input type that accepts EnumXyzMapArray and EnumXyzMapArrayOutput values.
// You can construct a concrete instance of `EnumXyzMapArrayInput` via:
//
//	EnumXyzMapArray{ EnumXyzMap{ "key": EnumXyzArgs{...} } }
type EnumXyzMapArrayInput interface {
	pulumi.Input

	ToEnumXyzMapArrayOutput() EnumXyzMapArrayOutput
	ToEnumXyzMapArrayOutputWithContext(context.Context) EnumXyzMapArrayOutput
}

type EnumXyzMapArrayOutput struct{ *pulumi.OutputState }

func (EnumXyzMapArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]map[string]EnumXyz)(nil)).Elem()
}

func (o EnumXyzMapArrayOutput) ToEnumXyzMapArrayOutput() EnumXyzMapArrayOutput {
	return o
}

func (o EnumXyzMapArrayOutput) ToEnumXyzMapArrayOutputWithContext(ctx context.Context) EnumXyzMapArrayOutput {
	return o
}

func (o EnumXyzMapArrayOutput) Index(i pulumi.IntInput) EnumXyzMapOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) map[string]EnumXyz {
		return vs[0].([]map[string]EnumXyz)[vs[1].(int)]
	}).(EnumXyzMapOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EnumXyzMapArrayInput)(nil)).Elem(), EnumXyzMapArray{})
	pulumi.RegisterOutputType(EnumXyzMapArrayOutput{})
}
